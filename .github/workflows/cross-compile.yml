name: omniedge build in host machine

env:
  APP_NAME: 'omniedge'
  MAINTAINER: 'OmniEdge.io'
  DESC: 'Bring intranet on the internet'

on:
  push:
    branches:
      - dev
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      env:
        description: env of the action
        default: prod
        required: false
      tag:
        description: tag ( if tag is not empty, env is always prod)
        required: false
jobs:
  build:
    name: Build on ${{ matrix.platform }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.env || 'dev' }}
      TAG: ${{ github.event.inputs.tag }}
    strategy:
      matrix:
        platform: [ mips ]
    runs-on: ubuntu-latest
    steps:
      - name: setup env to prod if tag is not empty
        if: ${{ env.TAG }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Checkout without tag
        if: ${{ !env.TAG }}
        uses: actions/checkout@master

      - name: Checkout with tag
        uses: actions/checkout@master
        if: ${{ env.TAG }}
        with:
          ref: ${{ env.TAG }}
      - name: setup golang bootstrap
        run: |
          curl -# -O https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz
          tar -zxvf go1.4-bootstrap-20171003.tar.gz 
          cd go/src/
          GOOS=linux GOARCH=amd64 ./make.bash
          cd .. && cd ..
      - name: prepare openwrt
        run: |
          wget https://downloads.openwrt.org/releases/19.07.9/targets/ar71xx/generic/openwrt-sdk-19.07.9-ar71xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz
          tar -xf openwrt-sdk-19.07.9-ar71xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz 
          mv openwrt-sdk-19.07.9-ar71xx-generic_gcc-7.5.0_musl.Linux-x86_64 openwrt_19.07.09-ar71xx
          rm go1.4-bootstrap-20171003.tar.gz 
          rm openwrt-sdk-19.07.9-ar71xx-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz 

      - name: Compile go for mips
        run: |
          export GOROOT_BOOTSTRAP=/go
          export STAGING_DIR=/openwrt_19.07.09-ar71xx/staging_dir
          wget https://go.dev/dl/go1.18.5.src.tar.gz
          mkdir golang
          mv go1.18.5.src.tar.gz golang/
          cd golang/
          tar -xvf go1.18.5.src.tar.gz
          cd go/src/
          CGO_ENABLED=1 GOOS=linux GOARCH=mips GOMIPS=softfloat ./make.bash
          cd ..
          ls /pkg
          ls /bin
          cd ..
      - name: Prepare the environment variable
        run: |
          export GOROOT_BOOTSTRAP=/golang/go
          export CC=/openwrt_19.07.09-ar71xx/staging_dir/toolchain-mips_24kc_gcc-7.5.0_musl/bin/mips-openwrt-linux-gcc
          export CXX=/openwrt_19.07.09-ar71xx/staging_dir/toolchain-mips_24kc_gcc-7.5.0_musl/bin/mips-openwrt-linux-g++
          export GOROOT=/golang/go
          export GOBIN=$GOROOT/bin
          export GOPATH=/omniedge
          export PATH=$PATH:$GOBIN:GOPATH/bin
          echo $PATH
          go version
      - name: make
        run: |
          GOOS=linux GOARCH={{matrix.platform}} GOMIPS=softfloat BUILD_ENV=${{ env.ENVIRONMENT }} make build
          upx -9 -k ./out/omniedge
          zip -j ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip ./out/omniedge
          sha256sum ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip > ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip.sha256
          cat ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip.sha256

      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: ./out/omniedge
          
      - uses: softprops/action-gh-release@v1
        if: ${{ env.TAG }}
        with:
          token: ${{ secrets.GIT_HUB_TOKEN}}
          files: |
            omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          tag_name: ${{ env.TAG }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: true
          prerelease: true
          
      - name: Upload zip 
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          asset_name: omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          asset_content_type: application/zip
